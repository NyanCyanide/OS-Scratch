Process  : 1
Concepts : Assembler, BIOS
Goal     : Create a file which the BIOS interprests as a bootable disk

>== Threory ==<

=> When the computer boots, the BIOS doesn't know how to load the OS, so it deleggates that task to the boot sector.
=> Thus boot sector must be placed in a known, stadard location.
=> That location would be first sector of the disk and occupies 512 bytes.

=> To make sure that the "disk is bootable", the BIOS checks that bytes 511 and 512 of the alleged boot sector are bytes 0xAA55

Simplest boot Sector :

    e9 fd ff 00 00 00 00 00 00 00 00 00 00 00 00 00
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    [  29 more lines with sixteen zero-bytes each ]
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 55 aa

*** x86 is little endian, ending with 16-bit value 0xAA55, first three bytes perform an infinte jump

=> Performs Infinte loop! and also displayinhg Booting from Hard Disk!!

Process  : 2
Concepts : Interrupts, CPU registers
Goal     : Make our previously silent boot sector print some text

>== Theory ==<

=> Imporve the previous boot sector
=> Make the boot sector to print some text on the screen
=> to print text "Hello"
=> To store each character into the register 'al', i.e. lower part of 'ax'
=> To store 0x0e into 'ah', i.e. higher part of 'ax', which tells the video interrupt that the actual function we want to run is to 'write the contents of al in tty mode'
=> 0x10 which raises genereal interrupt for video services.

Process  : 3
Concepts : Memory offsets, pointers 
Goal     : Learn how th ecomputer memory organized

>== Theory ==<

=> Refer Figure 3.1 => Memory Layout
=> Well, BIOS places the boor sector at 0x7C00
=> To figure it out, will try 4 strategies

=> After running the program,
    first attempt is that it tries to load the immediate offset into 'al' as the character to print